@model Fidly.ViewModels.NewCustomerViewModel

@{
    ViewData["Title"] = "CustomerForm";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@* wrap the Html.BeginForm(HtmlHelper) in a @using() block, the object returned from the Html.Beginform will be Dispose()ed and in that method will render the closing form tag </form> *@
@using(Html.BeginForm("Create", "Customer"))
{
    <h2>New Customer</h2> 

    <div class="form-group">
        <div class="bottom-one">
        @Html.LabelFor(m => m.Customers.Name)
        @Html.TextBoxFor(m => m.Customers.Name, new { @class="form-control" })
        @Html.ValidationMessageFor(m => m.Customers.Name)
        </div>
    </div>   
    <div class="form-group">
         <div class="bottom-one">
          @Html.LabelFor(m => m.Customers.MembershipTypeId)
          @Html.DropDownListFor(m => m.Customers.MembershipTypeId, new SelectList(Model.MembershipType, "Id", "MembershipName"), "Select Membership Type", new { @class="form-control" }) 
          @Html.ValidationMessageFor(m => m.Customers.MembershipTypeId)     
          </div>
    </div>
    <div class="form-group">
         <div class="bottom-one">
        @Html.LabelFor(m => m.Customers.DOB)
        @Html.TextBoxFor(m => m.Customers.DOB, "{0:MM/dd/yyyy}",new { @class="form-control" })
        @Html.ValidationMessageFor(m => m.Customers.DOB)
        </div>
    </div>
     <div class="checkbox">
         <div class="bottom-one">
        <label>
             @Html.CheckBoxFor(m => m.Customers.IsSubscribedToNewsletter)Subscribe to newsletter?
        </label>
        </div>       
    </div>

    @Html.HiddenFor(m => m.Customers.Id)
    
        <button type="submit" class="btn btn-primary">Save</button>   

}

